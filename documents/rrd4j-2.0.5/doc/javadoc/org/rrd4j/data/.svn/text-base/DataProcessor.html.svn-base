<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0) on Tue Feb 27 00:41:50 CET 2007 -->
<TITLE>
DataProcessor
</TITLE>

<META NAME="date" CONTENT="2007-02-27">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="DataProcessor";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/rrd4j/data/CubicSplineInterpolator.html" title="class in org.rrd4j.data"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/rrd4j/data/LinearInterpolator.html" title="class in org.rrd4j.data"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/rrd4j/data/DataProcessor.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="DataProcessor.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
<FONT SIZE="-1">
org.rrd4j.data</FONT>
<BR>
Class DataProcessor</H2>
<PRE>
java.lang.Object
  <IMG SRC="../../../resources/inherit.gif" ALT="extended by "><B>org.rrd4j.data.DataProcessor</B>
</PRE>
<HR>
<DL>
<DT><PRE>public class <B>DataProcessor</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
Class which should be used for all calculations based on the data fetched from RRD files. This class
 supports ordinary DEF datasources (defined in RRD files), CDEF datasources (RPN expressions evaluation),
 SDEF (static datasources - extension of Rrd4j) and PDEF (plottables, see
 <A HREF="../../../org/rrd4j/data/Plottable.html" title="class in org.rrd4j.data"><CODE>Plottable</CODE></A> for more information.<p>

 Typical class usage:<p>
 <pre>
 final long t1 = ...
 final long t2 = ...
 DataProcessor dp = new DataProcessor(t1, t2);
 // DEF datasource
 dp.addDatasource("x", "demo.rrd", "some_source", "AVERAGE");
 // DEF datasource
 dp.addDatasource("y", "demo.rrd", "some_other_source", "AVERAGE");
 // CDEF datasource, z = (x + y) / 2
 dp.addDatasource("z", "x,y,+,2,/");
 // ACTION!
 dp.processData();
 // Dump calculated values
 System.out.println(dp.dump());
 </pre>
<P>

<P>
<HR>

<P>
<!-- =========== FIELD SUMMARY =========== -->

<A NAME="field_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Field Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#DEFAULT_PIXEL_COUNT">DEFAULT_PIXEL_COUNT</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant representing the default number of pixels on a Rrd4j graph (will be used if
 no other value is specified with <A HREF="../../../org/rrd4j/data/DataProcessor.html#setStep(long)"><CODE>setStep()</CODE></A> method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#DEFAULT_POOL_USAGE_POLICY">DEFAULT_POOL_USAGE_POLICY</A></B></CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constant that defines the default <A HREF="../../../org/rrd4j/core/RrdDbPool.html" title="class in org.rrd4j.core"><CODE>RrdDbPool</CODE></A> usage policy.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#DataProcessor(java.util.Calendar, java.util.Calendar)">DataProcessor</A></B>(java.util.Calendar&nbsp;gc1,
              java.util.Calendar&nbsp;gc2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates new DataProcessor object for the given time span.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#DataProcessor(java.util.Date, java.util.Date)">DataProcessor</A></B>(java.util.Date&nbsp;d1,
              java.util.Date&nbsp;d2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates new DataProcessor object for the given time span.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#DataProcessor(long, long)">DataProcessor</A></B>(long&nbsp;t1,
              long&nbsp;t2)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates new DataProcessor object for the given time span.</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#addDatasource(java.lang.String, org.rrd4j.core.FetchData)">addDatasource</A></B>(java.lang.String&nbsp;name,
              <A HREF="../../../org/rrd4j/core/FetchData.html" title="class in org.rrd4j.core">FetchData</A>&nbsp;fetchData)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds DEF datasource with datasource values already available in the FetchData object.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#addDatasource(java.lang.String, org.rrd4j.data.Plottable)">addDatasource</A></B>(java.lang.String&nbsp;name,
              <A HREF="../../../org/rrd4j/data/Plottable.html" title="class in org.rrd4j.data">Plottable</A>&nbsp;plottable)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds a custom, <A HREF="../../../org/rrd4j/data/Plottable.html" title="class in org.rrd4j.data"><CODE>plottable</CODE></A> datasource (<b>PDEF</b>).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#addDatasource(java.lang.String, java.lang.String)">addDatasource</A></B>(java.lang.String&nbsp;name,
              java.lang.String&nbsp;rpnExpression)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds complex source (<b>CDEF</b>).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#addDatasource(java.lang.String, java.lang.String, org.rrd4j.ConsolFun)">addDatasource</A></B>(java.lang.String&nbsp;name,
              java.lang.String&nbsp;defName,
              org.rrd4j.ConsolFun&nbsp;consolFun)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds static source (<b>SDEF</b>).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#addDatasource(java.lang.String, java.lang.String, java.lang.String, org.rrd4j.ConsolFun)">addDatasource</A></B>(java.lang.String&nbsp;name,
              java.lang.String&nbsp;file,
              java.lang.String&nbsp;dsName,
              org.rrd4j.ConsolFun&nbsp;consolFunc)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds simple datasource (<b>DEF</b>).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#addDatasource(java.lang.String, java.lang.String, java.lang.String, org.rrd4j.ConsolFun, java.lang.String)">addDatasource</A></B>(java.lang.String&nbsp;name,
              java.lang.String&nbsp;file,
              java.lang.String&nbsp;dsName,
              org.rrd4j.ConsolFun&nbsp;consolFunc,
              java.lang.String&nbsp;backend)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds simple source (<b>DEF</b>).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#dump()">dump</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dumps timestamps and values of all datasources in a tabelar form.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#get95Percentile(java.lang.String)">get95Percentile</A></B>(java.lang.String&nbsp;sourceName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is just an alias for <A HREF="../../../org/rrd4j/data/DataProcessor.html#getPercentile(java.lang.String)"><CODE>getPercentile(String)</CODE></A> method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getAggregate(java.lang.String, org.rrd4j.ConsolFun)">getAggregate</A></B>(java.lang.String&nbsp;sourceName,
             org.rrd4j.ConsolFun&nbsp;consolFun)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns single aggregated value for a single datasource.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;<A HREF="../../../org/rrd4j/data/Aggregates.html" title="class in org.rrd4j.data">Aggregates</A></CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getAggregates(java.lang.String)">getAggregates</A></B>(java.lang.String&nbsp;sourceName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns all (MIN, MAX, LAST, FIRST, AVERAGE and TOTAL) aggregated values for a single datasource.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getEndingTimestamp()">getEndingTimestamp</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns ending timestamp.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getFetchRequestResolution()">getFetchRequestResolution</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns desired RRD archive step (reslution) in seconds to be used while fetching data
 from RRD files.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getLastRrdArchiveUpdateTime()">getLastRrdArchiveUpdateTime</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns time when last RRD archive was updated (all RRD files are considered).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getPercentile(java.lang.String)">getPercentile</A></B>(java.lang.String&nbsp;sourceName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Used by ISPs which charge for bandwidth utilization on a "95th percentile" basis.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getPercentile(java.lang.String, double)">getPercentile</A></B>(java.lang.String&nbsp;sourceName,
              double&nbsp;percentile)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The same as <A HREF="../../../org/rrd4j/data/DataProcessor.html#getPercentile(java.lang.String)"><CODE>getPercentile(String)</CODE></A> but with a possibility to define custom percentile boundary
 (different from 95).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;int</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getPixelCount()">getPixelCount</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of pixels (target graph width).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getSourceNames()">getSourceNames</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns array of datasource names defined in this DataProcessor.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getStep()">getStep</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the time step used for data processing.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getTimestamps()">getTimestamps</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns consolidated timestamps created with the <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A> method.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getTimestampsPerPixel()">getTimestampsPerPixel</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Calculates timestamps which correspond to individual pixels on the graph
 based on the graph width set with a <A HREF="../../../org/rrd4j/data/DataProcessor.html#setPixelCount(int)"><CODE>setPixelCount(int)</CODE></A> method call.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getTimestampsPerPixel(int)">getTimestampsPerPixel</A></B>(int&nbsp;pixelCount)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Calculates timestamps which correspond to individual pixels on the graph.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double[][]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getValues()">getValues</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array of all datasource values for all datasources.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getValues(java.lang.String)">getValues</A></B>(java.lang.String&nbsp;sourceName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns calculated values for a single datasource.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getValuesPerPixel(java.lang.String)">getValuesPerPixel</A></B>(java.lang.String&nbsp;sourceName)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method used to calculate datasource values which should be presented on the graph
 based on the graph width set with a <A HREF="../../../org/rrd4j/data/DataProcessor.html#setPixelCount(int)"><CODE>setPixelCount(int)</CODE></A> method call.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;double[]</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#getValuesPerPixel(java.lang.String, int)">getValuesPerPixel</A></B>(java.lang.String&nbsp;sourceName,
                  int&nbsp;pixelCount)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method used to calculate datasource values which should be presented on the graph
 based on the desired graph width.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#isPoolUsed()">isPoolUsed</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns boolean value representing <A HREF="../../../org/rrd4j/core/RrdDbPool.html" title="class in org.rrd4j.core"><CODE>RrdDbPool</CODE></A> usage policy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#main(java.lang.String[])">main</A></B>(java.lang.String[]&nbsp;args)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cute little demo.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()">processData</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method that should be called once all datasources are defined.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#setFetchRequestResolution(long)">setFetchRequestResolution</A></B>(long&nbsp;fetchRequestResolution)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets desired RRD archive step in seconds to be used internally while fetching data
 from RRD files.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#setPixelCount(int)">setPixelCount</A></B>(int&nbsp;pixelCount)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the number of pixels (target graph width).</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#setPoolUsed(boolean)">setPoolUsed</A></B>(boolean&nbsp;poolUsed)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the <A HREF="../../../org/rrd4j/core/RrdDbPool.html" title="class in org.rrd4j.core"><CODE>RrdDbPool</CODE></A> usage policy.</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><A HREF="../../../org/rrd4j/data/DataProcessor.html#setStep(long)">setStep</A></B>(long&nbsp;step)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Roughly corresponds to the --step option in RRDTool's graph/xport commands.</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ============ FIELD DETAIL =========== -->

<A NAME="field_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Field Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="DEFAULT_PIXEL_COUNT"><!-- --></A><H3>
DEFAULT_PIXEL_COUNT</H3>
<PRE>
public static final int <B>DEFAULT_PIXEL_COUNT</B></PRE>
<DL>
<DD>Constant representing the default number of pixels on a Rrd4j graph (will be used if
 no other value is specified with <A HREF="../../../org/rrd4j/data/DataProcessor.html#setStep(long)"><CODE>setStep()</CODE></A> method.
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#org.rrd4j.data.DataProcessor.DEFAULT_PIXEL_COUNT">Constant Field Values</A></DL>
</DL>
<HR>

<A NAME="DEFAULT_POOL_USAGE_POLICY"><!-- --></A><H3>
DEFAULT_POOL_USAGE_POLICY</H3>
<PRE>
public static final boolean <B>DEFAULT_POOL_USAGE_POLICY</B></PRE>
<DL>
<DD>Constant that defines the default <A HREF="../../../org/rrd4j/core/RrdDbPool.html" title="class in org.rrd4j.core"><CODE>RrdDbPool</CODE></A> usage policy. Defaults to <code>false</code>
 (i.e. the pool will not be used to fetch data from RRD files)
<P>
<DL>
<DT><B>See Also:</B><DD><A HREF="../../../constant-values.html#org.rrd4j.data.DataProcessor.DEFAULT_POOL_USAGE_POLICY">Constant Field Values</A></DL>
</DL>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="DataProcessor(long, long)"><!-- --></A><H3>
DataProcessor</H3>
<PRE>
public <B>DataProcessor</B>(long&nbsp;t1,
                     long&nbsp;t2)</PRE>
<DL>
<DD>Creates new DataProcessor object for the given time span. Ending timestamp may be set to zero.
 In that case, the class will try to find the optimal ending timestamp based on the last update time of
 RRD files processed with the <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A> method.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>t1</CODE> - Starting timestamp in seconds without milliseconds<DD><CODE>t2</CODE> - Ending timestamp in seconds without milliseconds</DL>
</DL>
<HR>

<A NAME="DataProcessor(java.util.Date, java.util.Date)"><!-- --></A><H3>
DataProcessor</H3>
<PRE>
public <B>DataProcessor</B>(java.util.Date&nbsp;d1,
                     java.util.Date&nbsp;d2)</PRE>
<DL>
<DD>Creates new DataProcessor object for the given time span. Ending date may be set to null.
 In that case, the class will try to find optimal ending date based on the last update time of
 RRD files processed with the <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A> method.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>d1</CODE> - Starting date<DD><CODE>d2</CODE> - Ending date</DL>
</DL>
<HR>

<A NAME="DataProcessor(java.util.Calendar, java.util.Calendar)"><!-- --></A><H3>
DataProcessor</H3>
<PRE>
public <B>DataProcessor</B>(java.util.Calendar&nbsp;gc1,
                     java.util.Calendar&nbsp;gc2)</PRE>
<DL>
<DD>Creates new DataProcessor object for the given time span. Ending date may be set to null.
 In that case, the class will try to find optimal ending date based on the last update time of
 RRD files processed with the <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A> method.
<P>
<DL>
<DT><B>Parameters:</B><DD><CODE>gc1</CODE> - Starting Calendar date<DD><CODE>gc2</CODE> - Ending Calendar date</DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="isPoolUsed()"><!-- --></A><H3>
isPoolUsed</H3>
<PRE>
public boolean <B>isPoolUsed</B>()</PRE>
<DL>
<DD>Returns boolean value representing <A HREF="../../../org/rrd4j/core/RrdDbPool.html" title="class in org.rrd4j.core"><CODE>RrdDbPool</CODE></A> usage policy.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>true, if the pool will be used internally to fetch data from RRD files, false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="setPoolUsed(boolean)"><!-- --></A><H3>
setPoolUsed</H3>
<PRE>
public void <B>setPoolUsed</B>(boolean&nbsp;poolUsed)</PRE>
<DL>
<DD>Sets the <A HREF="../../../org/rrd4j/core/RrdDbPool.html" title="class in org.rrd4j.core"><CODE>RrdDbPool</CODE></A> usage policy.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>poolUsed</CODE> - true, if the pool should be used to fetch data from RRD files, false otherwise.</DL>
</DD>
</DL>
<HR>

<A NAME="setPixelCount(int)"><!-- --></A><H3>
setPixelCount</H3>
<PRE>
public void <B>setPixelCount</B>(int&nbsp;pixelCount)</PRE>
<DL>
<DD>Sets the number of pixels (target graph width). This number is used only to calculate pixel coordinates
 for Rrd4j graphs (methods <A HREF="../../../org/rrd4j/data/DataProcessor.html#getValuesPerPixel(java.lang.String)"><CODE>getValuesPerPixel(String)</CODE></A> and <A HREF="../../../org/rrd4j/data/DataProcessor.html#getTimestampsPerPixel()"><CODE>getTimestampsPerPixel()</CODE></A>),
 but has influence neither on datasource values calculated with the
 <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A> method nor on aggregated values returned from <A HREF="../../../org/rrd4j/data/DataProcessor.html#getAggregates(java.lang.String)"><CODE>getAggregates(String)</CODE></A>
 and similar methods. In other words, aggregated values will not change once you decide to change
 the dimension of your graph.<p>

 The default number of pixels is defined by constant <A HREF="../../../org/rrd4j/data/DataProcessor.html#DEFAULT_PIXEL_COUNT"><CODE>DEFAULT_PIXEL_COUNT</CODE></A>
 and can be changed with a <A HREF="../../../org/rrd4j/data/DataProcessor.html#setPixelCount(int)"><CODE>setPixelCount(int)</CODE></A> method.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pixelCount</CODE> - The number of pixels. If you process RRD data in order to display it on the graph,
                   this should be the width of your graph.</DL>
</DD>
</DL>
<HR>

<A NAME="getPixelCount()"><!-- --></A><H3>
getPixelCount</H3>
<PRE>
public int <B>getPixelCount</B>()</PRE>
<DL>
<DD>Returns the number of pixels (target graph width). See <A HREF="../../../org/rrd4j/data/DataProcessor.html#setPixelCount(int)"><CODE>setPixelCount(int)</CODE></A> for more information.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Target graph width</DL>
</DD>
</DL>
<HR>

<A NAME="setStep(long)"><!-- --></A><H3>
setStep</H3>
<PRE>
public void <B>setStep</B>(long&nbsp;step)</PRE>
<DL>
<DD>Roughly corresponds to the --step option in RRDTool's graph/xport commands. Here is an explanation borrowed
 from RRDTool:<p>

 <i>"By default rrdgraph calculates the width of one pixel in the time
 domain and tries to get data at that resolution from the RRD. With
 this switch you can override this behavior. If you want rrdgraph to
 get data at 1 hour resolution from the RRD, then you can set the
 step to 3600 seconds. Note, that a step smaller than 1 pixel will
 be silently ignored."</i><p>

 I think this option is not that useful, but it's here just for compatibility.<p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>step</CODE> - Time step at which data should be fetched from RRD files. If this method is not used,
             the step will be equal to the smallest RRD step of all processed RRD files. If no RRD file is processed,
             the step will be roughly equal to the with of one graph pixel (in seconds).</DL>
</DD>
</DL>
<HR>

<A NAME="getStep()"><!-- --></A><H3>
getStep</H3>
<PRE>
public long <B>getStep</B>()</PRE>
<DL>
<DD>Returns the time step used for data processing. Initially, this method returns zero.
 Once <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A> is finished, the method will return the real value used for
 all internal computations. Roughly corresponds to the --step option in RRDTool's graph/xport commands.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Step used for data processing.</DL>
</DD>
</DL>
<HR>

<A NAME="getFetchRequestResolution()"><!-- --></A><H3>
getFetchRequestResolution</H3>
<PRE>
public long <B>getFetchRequestResolution</B>()</PRE>
<DL>
<DD>Returns desired RRD archive step (reslution) in seconds to be used while fetching data
 from RRD files. In other words, this value will used as the last parameter of
 <A HREF="../../../org/rrd4j/core/RrdDb.html#createFetchRequest(org.rrd4j.ConsolFun, long, long, long)"><CODE>RrdDb.createFetchRequest()</CODE></A> method
 when this method is called internally by this DataProcessor.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Desired archive step (fetch resolution) in seconds.</DL>
</DD>
</DL>
<HR>

<A NAME="setFetchRequestResolution(long)"><!-- --></A><H3>
setFetchRequestResolution</H3>
<PRE>
public void <B>setFetchRequestResolution</B>(long&nbsp;fetchRequestResolution)</PRE>
<DL>
<DD>Sets desired RRD archive step in seconds to be used internally while fetching data
 from RRD files. In other words, this value will used as the last parameter of
 <A HREF="../../../org/rrd4j/core/RrdDb.html#createFetchRequest(org.rrd4j.ConsolFun, long, long, long)"><CODE>RrdDb.createFetchRequest()</CODE></A> method
 when this method is called internally by this DataProcessor. If this method is never called, fetch
 request resolution defaults to 1 (smallest possible archive step will be chosen automatically).
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>fetchRequestResolution</CODE> - Desired archive step (fetch resoltuion) in seconds.</DL>
</DD>
</DL>
<HR>

<A NAME="getEndingTimestamp()"><!-- --></A><H3>
getEndingTimestamp</H3>
<PRE>
public long <B>getEndingTimestamp</B>()</PRE>
<DL>
<DD>Returns ending timestamp. Basically, this value is equal to the ending timestamp
 specified in the constructor. However, if the ending timestamps was zero, it
 will be replaced with the real timestamp when the <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A> method returns. The real
 value will be calculated from the last update times of processed RRD files.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Ending timestamp in seconds</DL>
</DD>
</DL>
<HR>

<A NAME="getTimestamps()"><!-- --></A><H3>
getTimestamps</H3>
<PRE>
public long[] <B>getTimestamps</B>()</PRE>
<DL>
<DD>Returns consolidated timestamps created with the <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A> method.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>array of timestamps in seconds</DL>
</DD>
</DL>
<HR>

<A NAME="getValues(java.lang.String)"><!-- --></A><H3>
getValues</H3>
<PRE>
public double[] <B>getValues</B>(java.lang.String&nbsp;sourceName)</PRE>
<DL>
<DD>Returns calculated values for a single datasource. Corresponding timestamps can be obtained from
 the <A HREF="../../../org/rrd4j/data/DataProcessor.html#getTimestamps()"><CODE>getTimestamps()</CODE></A> method.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sourceName</CODE> - Datasource name
<DT><B>Returns:</B><DD>an array of datasource values
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - Thrown if invalid datasource name is specified,
                      or if datasource values are not yet calculated (method <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A>
                      was not called)</DL>
</DD>
</DL>
<HR>

<A NAME="getAggregate(java.lang.String, org.rrd4j.ConsolFun)"><!-- --></A><H3>
getAggregate</H3>
<PRE>
public double <B>getAggregate</B>(java.lang.String&nbsp;sourceName,
                           org.rrd4j.ConsolFun&nbsp;consolFun)</PRE>
<DL>
<DD>Returns single aggregated value for a single datasource.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sourceName</CODE> - Datasource name<DD><CODE>consolFun</CODE> - Consolidation function to be applied to fetched datasource values.
                   Valid consolidation functions are MIN, MAX, LAST, FIRST, AVERAGE and TOTAL
                   (these string constants are conveniently defined in the <CODE>ConsolFun</CODE> class)
<DT><B>Returns:</B><DD>MIN, MAX, LAST, FIRST, AVERAGE or TOTAL value calculated from the data
         for the given datasource name
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - Thrown if invalid datasource name is specified,
                      or if datasource values are not yet calculated (method <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A>
                      was not called)</DL>
</DD>
</DL>
<HR>

<A NAME="getAggregates(java.lang.String)"><!-- --></A><H3>
getAggregates</H3>
<PRE>
public <A HREF="../../../org/rrd4j/data/Aggregates.html" title="class in org.rrd4j.data">Aggregates</A> <B>getAggregates</B>(java.lang.String&nbsp;sourceName)</PRE>
<DL>
<DD>Returns all (MIN, MAX, LAST, FIRST, AVERAGE and TOTAL) aggregated values for a single datasource.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sourceName</CODE> - Datasource name
<DT><B>Returns:</B><DD>Object containing all aggregated values
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - Thrown if invalid datasource name is specified,
                      or if datasource values are not yet calculated (method <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A>
                      was not called)</DL>
</DD>
</DL>
<HR>

<A NAME="get95Percentile(java.lang.String)"><!-- --></A><H3>
get95Percentile</H3>
<PRE>
public double <B>get95Percentile</B>(java.lang.String&nbsp;sourceName)</PRE>
<DL>
<DD>This method is just an alias for <A HREF="../../../org/rrd4j/data/DataProcessor.html#getPercentile(java.lang.String)"><CODE>getPercentile(String)</CODE></A> method.

 Used by ISPs which charge for bandwidth utilization on a "95th percentile" basis.<p>

 The 95th percentile is the highest source value left when the top 5% of a numerically sorted set
 of source data is discarded. It is used as a measure of the peak value used when one discounts
 a fair amount for transitory spikes. This makes it markedly different from the average.<p>

 Read more about this topic at
 <a href="http://www.red.net/support/resourcecentre/leasedline/percentile.php">Rednet</a> or
 <a href="http://www.bytemark.co.uk/support/tech/95thpercentile.html">Bytemark</a>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sourceName</CODE> - Datasource name
<DT><B>Returns:</B><DD>95th percentile of fetched source values</DL>
</DD>
</DL>
<HR>

<A NAME="getPercentile(java.lang.String)"><!-- --></A><H3>
getPercentile</H3>
<PRE>
public double <B>getPercentile</B>(java.lang.String&nbsp;sourceName)</PRE>
<DL>
<DD>Used by ISPs which charge for bandwidth utilization on a "95th percentile" basis.<p>

 The 95th percentile is the highest source value left when the top 5% of a numerically sorted set
 of source data is discarded. It is used as a measure of the peak value used when one discounts
 a fair amount for transitory spikes. This makes it markedly different from the average.<p>

 Read more about this topic at
 <a href="http://www.red.net/support/resourcecentre/leasedline/percentile.php">Rednet</a> or
 <a href="http://www.bytemark.co.uk/support/tech/95thpercentile.html">Bytemark</a>.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sourceName</CODE> - Datasource name
<DT><B>Returns:</B><DD>95th percentile of fetched source values</DL>
</DD>
</DL>
<HR>

<A NAME="getPercentile(java.lang.String, double)"><!-- --></A><H3>
getPercentile</H3>
<PRE>
public double <B>getPercentile</B>(java.lang.String&nbsp;sourceName,
                            double&nbsp;percentile)</PRE>
<DL>
<DD>The same as <A HREF="../../../org/rrd4j/data/DataProcessor.html#getPercentile(java.lang.String)"><CODE>getPercentile(String)</CODE></A> but with a possibility to define custom percentile boundary
 (different from 95).
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sourceName</CODE> - Datasource name.<DD><CODE>percentile</CODE> - Boundary percentile. Value of 95 (%) is suitable in most cases, but you are free
 to provide your own percentile boundary between zero and 100.
<DT><B>Returns:</B><DD>Requested percentile of fetched source values</DL>
</DD>
</DL>
<HR>

<A NAME="getSourceNames()"><!-- --></A><H3>
getSourceNames</H3>
<PRE>
public java.lang.String[] <B>getSourceNames</B>()</PRE>
<DL>
<DD>Returns array of datasource names defined in this DataProcessor.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>array of datasource names</DL>
</DD>
</DL>
<HR>

<A NAME="getValues()"><!-- --></A><H3>
getValues</H3>
<PRE>
public double[][] <B>getValues</B>()</PRE>
<DL>
<DD>Returns an array of all datasource values for all datasources. Each row in this two-dimensional
 array represents an array of calculated values for a single datasource. The order of rows is the same
 as the order in which datasources were added to this DataProcessor object.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>All datasource values for all datasources. The first index is the index of the datasource,
         the second index is the index of the datasource value. The number of datasource values is equal
         to the number of timestamps returned with <A HREF="../../../org/rrd4j/data/DataProcessor.html#getTimestamps()"><CODE>getTimestamps()</CODE></A>  method.
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - Thrown if invalid datasource name is specified,
                      or if datasource values are not yet calculated (method <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A>
                      was not called)</DL>
</DD>
</DL>
<HR>

<A NAME="addDatasource(java.lang.String, org.rrd4j.data.Plottable)"><!-- --></A><H3>
addDatasource</H3>
<PRE>
public void <B>addDatasource</B>(java.lang.String&nbsp;name,
                          <A HREF="../../../org/rrd4j/data/Plottable.html" title="class in org.rrd4j.data">Plottable</A>&nbsp;plottable)</PRE>
<DL>
<DD><p>Adds a custom, <A HREF="../../../org/rrd4j/data/Plottable.html" title="class in org.rrd4j.data"><CODE>plottable</CODE></A> datasource (<b>PDEF</b>).
 The datapoints should be made available by a class extending
 <A HREF="../../../org/rrd4j/data/Plottable.html" title="class in org.rrd4j.data"><CODE>Plottable</CODE></A> class.</p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - source name.<DD><CODE>plottable</CODE> - class that extends Plottable class and is suited for graphing.</DL>
</DD>
</DL>
<HR>

<A NAME="addDatasource(java.lang.String, java.lang.String)"><!-- --></A><H3>
addDatasource</H3>
<PRE>
public void <B>addDatasource</B>(java.lang.String&nbsp;name,
                          java.lang.String&nbsp;rpnExpression)</PRE>
<DL>
<DD><p>Adds complex source (<b>CDEF</b>).
 Complex sources are evaluated using the supplied <code>RPN</code> expression.</p>

 <p>Complex source <code>name</code> can be used:</p>
 <ul>
 <li>To specify sources for line, area and stack plots.</li>
 <li>To define other complex sources.</li>
 </ul>

 <p>Rrd4j supports the following RPN functions, operators and constants: +, -, *, /,
 %, SIN, COS, LOG, EXP, FLOOR, CEIL, ROUND, POW, ABS, SQRT, RANDOM, LT, LE, GT, GE, EQ,
 IF, MIN, MAX, LIMIT, DUP, EXC, POP, UN, UNKN, NOW, TIME, PI, E,
 AND, OR, XOR, PREV, PREV(sourceName), INF, NEGINF, STEP, YEAR, MONTH, DATE,
 HOUR, MINUTE, SECOND, WEEK, SIGN and RND.</p>

 <p>Rrd4j does not force you to specify at least one simple source name as RRDTool.</p>

 <p>For more details on RPN see RRDTool's
 <a href="http://people.ee.ethz.ch/~oetiker/webtools/rrdtool/manual/rrdgraph.html" target="man">
 rrdgraph man page</a>.</p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - source name.<DD><CODE>rpnExpression</CODE> - RPN expression containig comma (or space) delimited simple and complex
                      source names, RPN constants, functions and operators.</DL>
</DD>
</DL>
<HR>

<A NAME="addDatasource(java.lang.String, java.lang.String, org.rrd4j.ConsolFun)"><!-- --></A><H3>
addDatasource</H3>
<PRE>
public void <B>addDatasource</B>(java.lang.String&nbsp;name,
                          java.lang.String&nbsp;defName,
                          org.rrd4j.ConsolFun&nbsp;consolFun)</PRE>
<DL>
<DD><p>Adds static source (<b>SDEF</b>). Static sources are the result of a consolidation function applied
 to *any* other source that has been defined previously.</p>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - source name.<DD><CODE>defName</CODE> - Name of the datasource to calculate the value from.<DD><CODE>consolFun</CODE> - Consolidation function to use for value calculation</DL>
</DD>
</DL>
<HR>

<A NAME="addDatasource(java.lang.String, java.lang.String, java.lang.String, org.rrd4j.ConsolFun)"><!-- --></A><H3>
addDatasource</H3>
<PRE>
public void <B>addDatasource</B>(java.lang.String&nbsp;name,
                          java.lang.String&nbsp;file,
                          java.lang.String&nbsp;dsName,
                          org.rrd4j.ConsolFun&nbsp;consolFunc)</PRE>
<DL>
<DD><p>Adds simple datasource (<b>DEF</b>). Simple source <code>name</code>
 can be used:</p>
 <ul>
 <li>To specify sources for line, area and stack plots.</li>
 <li>To define complex sources
 </ul>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - source name.<DD><CODE>file</CODE> - Path to RRD file.<DD><CODE>dsName</CODE> - Datasource name defined in the RRD file.<DD><CODE>consolFunc</CODE> - Consolidation function that will be used to extract data from the RRD</DL>
</DD>
</DL>
<HR>

<A NAME="addDatasource(java.lang.String, java.lang.String, java.lang.String, org.rrd4j.ConsolFun, java.lang.String)"><!-- --></A><H3>
addDatasource</H3>
<PRE>
public void <B>addDatasource</B>(java.lang.String&nbsp;name,
                          java.lang.String&nbsp;file,
                          java.lang.String&nbsp;dsName,
                          org.rrd4j.ConsolFun&nbsp;consolFunc,
                          java.lang.String&nbsp;backend)</PRE>
<DL>
<DD><p>Adds simple source (<b>DEF</b>). Source <code>name</code> can be used:</p>
 <ul>
 <li>To specify sources for line, area and stack plots.</li>
 <li>To define complex sources
 </ul>
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - Source name.<DD><CODE>file</CODE> - Path to RRD file.<DD><CODE>dsName</CODE> - Data source name defined in the RRD file.<DD><CODE>consolFunc</CODE> - Consolidation function that will be used to extract data from the RRD
                   file ("AVERAGE", "MIN", "MAX" or "LAST" - these string constants are conveniently defined
                   in the <CODE>ConsolFun</CODE> class).<DD><CODE>backend</CODE> - Name of the RrdBackendFactory that should be used for this RrdDb.</DL>
</DD>
</DL>
<HR>

<A NAME="addDatasource(java.lang.String, org.rrd4j.core.FetchData)"><!-- --></A><H3>
addDatasource</H3>
<PRE>
public void <B>addDatasource</B>(java.lang.String&nbsp;name,
                          <A HREF="../../../org/rrd4j/core/FetchData.html" title="class in org.rrd4j.core">FetchData</A>&nbsp;fetchData)</PRE>
<DL>
<DD>Adds DEF datasource with datasource values already available in the FetchData object. This method is
 used internally by Rrd4j and probably has no purpose outside of it.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>name</CODE> - Source name.<DD><CODE>fetchData</CODE> - Fetched data containing values for the given source name.</DL>
</DD>
</DL>
<HR>

<A NAME="processData()"><!-- --></A><H3>
processData</H3>
<PRE>
public void <B>processData</B>()
                 throws java.io.IOException</PRE>
<DL>
<DD>Method that should be called once all datasources are defined. Data will be fetched from
 RRD files, RPN expressions will be calculated, etc.
<P>
<DD><DL>

<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE> - Thrown in case of I/O error (while fetching data from RRD files)</DL>
</DD>
</DL>
<HR>

<A NAME="getValuesPerPixel(java.lang.String, int)"><!-- --></A><H3>
getValuesPerPixel</H3>
<PRE>
public double[] <B>getValuesPerPixel</B>(java.lang.String&nbsp;sourceName,
                                  int&nbsp;pixelCount)</PRE>
<DL>
<DD>Method used to calculate datasource values which should be presented on the graph
 based on the desired graph width. Each value returned represents a single pixel on the graph.
 Corresponding timestamp can be found in the array returned from <A HREF="../../../org/rrd4j/data/DataProcessor.html#getTimestampsPerPixel()"><CODE>getTimestampsPerPixel()</CODE></A>
 method.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sourceName</CODE> - Datasource name<DD><CODE>pixelCount</CODE> - Graph width
<DT><B>Returns:</B><DD>Per-pixel datasource values
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - Thrown if datasource values are not yet calculated (method <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A>
 was not called)</DL>
</DD>
</DL>
<HR>

<A NAME="getValuesPerPixel(java.lang.String)"><!-- --></A><H3>
getValuesPerPixel</H3>
<PRE>
public double[] <B>getValuesPerPixel</B>(java.lang.String&nbsp;sourceName)</PRE>
<DL>
<DD>Method used to calculate datasource values which should be presented on the graph
 based on the graph width set with a <A HREF="../../../org/rrd4j/data/DataProcessor.html#setPixelCount(int)"><CODE>setPixelCount(int)</CODE></A> method call.
 Each value returned represents a single pixel on the graph. Corresponding timestamp can be
 found in the array returned from <A HREF="../../../org/rrd4j/data/DataProcessor.html#getTimestampsPerPixel()"><CODE>getTimestampsPerPixel()</CODE></A> method.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>sourceName</CODE> - Datasource name
<DT><B>Returns:</B><DD>Per-pixel datasource values
<DT><B>Throws:</B>
<DD><CODE>java.lang.IllegalArgumentException</CODE> - Thrown if datasource values are not yet calculated (method <A HREF="../../../org/rrd4j/data/DataProcessor.html#processData()"><CODE>processData()</CODE></A>
 was not called)</DL>
</DD>
</DL>
<HR>

<A NAME="getTimestampsPerPixel(int)"><!-- --></A><H3>
getTimestampsPerPixel</H3>
<PRE>
public long[] <B>getTimestampsPerPixel</B>(int&nbsp;pixelCount)</PRE>
<DL>
<DD>Calculates timestamps which correspond to individual pixels on the graph.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>pixelCount</CODE> - Graph width
<DT><B>Returns:</B><DD>Array of timestamps</DL>
</DD>
</DL>
<HR>

<A NAME="getTimestampsPerPixel()"><!-- --></A><H3>
getTimestampsPerPixel</H3>
<PRE>
public long[] <B>getTimestampsPerPixel</B>()</PRE>
<DL>
<DD>Calculates timestamps which correspond to individual pixels on the graph
 based on the graph width set with a <A HREF="../../../org/rrd4j/data/DataProcessor.html#setPixelCount(int)"><CODE>setPixelCount(int)</CODE></A> method call.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Array of timestamps</DL>
</DD>
</DL>
<HR>

<A NAME="dump()"><!-- --></A><H3>
dump</H3>
<PRE>
public java.lang.String <B>dump</B>()</PRE>
<DL>
<DD>Dumps timestamps and values of all datasources in a tabelar form. Very useful for debugging.
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Dumped object content.</DL>
</DD>
</DL>
<HR>

<A NAME="getLastRrdArchiveUpdateTime()"><!-- --></A><H3>
getLastRrdArchiveUpdateTime</H3>
<PRE>
public long <B>getLastRrdArchiveUpdateTime</B>()</PRE>
<DL>
<DD>Returns time when last RRD archive was updated (all RRD files are considered).
<P>
<DD><DL>

<DT><B>Returns:</B><DD>Last archive update time for all RRD files in this DataProcessor</DL>
</DD>
</DL>
<HR>

<A NAME="main(java.lang.String[])"><!-- --></A><H3>
main</H3>
<PRE>
public static void <B>main</B>(java.lang.String[]&nbsp;args)
                 throws java.io.IOException</PRE>
<DL>
<DD>Cute little demo. Uses demo.rrd file previously created by basic Rrd4j demo.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>args</CODE> - Not used
<DT><B>Throws:</B>
<DD><CODE>java.io.IOException</CODE></DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="../../../org/rrd4j/data/CubicSplineInterpolator.html" title="class in org.rrd4j.data"><B>PREV CLASS</B></A>&nbsp;
&nbsp;<A HREF="../../../org/rrd4j/data/LinearInterpolator.html" title="class in org.rrd4j.data"><B>NEXT CLASS</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../../../index.html?org/rrd4j/data/DataProcessor.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="DataProcessor.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>
