/*
 jQuery Carousel 0.9.5
 Copyright 2008-2009 Thomas Lanciaux and Pierre Bertet.
 This software is licensed under the CC-GNU LGPL <http://creativecommons.org/licenses/LGPL/2.1/>

 Notice! Script was deobfuscated and modified by Dmitry Solomadin.

 Modified for Endless Loop
 05/25/2011 by @author Roman Iermakov <rermakov@odesk.com>

 */
(function(jQuery) {
    jQuery.fn.carousel = function(settings) {
        var settings = jQuery.extend({
            direction:"horizontal",
            loop:false,
            dispItems:1,
            pagination:false,
            paginationPosition:"inside",
            nextBtn:'<a role="button">&nbsp;</a>',
            prevBtn:'<a role="button">&nbsp;</a>',
            btnsPosition:"inside",
            nextBtnInsert:"appendTo",
            prevBtnInsert:"prependTo",
            nextBtnInsertFn:false,
            prevBtnInsertFn:false,
            autoSlide:false,
            autoSlideInterval:3000,
            delayAutoSlide:false,
            combinedClasses:false,
            effect:"slide",
            selectable: false,
            updateImgOnSelect: null,
            slideEasing:"swing",
            animSpeed:"normal",
            verticalMargin:0,
            treatAsCarousel: true,
            callback:function() {
            },
            useAddress:false,
            adressIdentifier:"carousel",
            tabLabel:function(k) {
                return k;
            },
            showEmptyItems:true
        }, settings);
        if (settings.btnsPosition == "outside") {
            settings.prevBtnInsert = "insertBefore";
            settings.nextBtnInsert = "insertAfter"
        }
        settings.delayAutoSlide = settings.delayAutoSlide || settings.autoSlideInterval;

        var self = this;
        return this.each(function() {
            var carousel = {$elts:{},params:settings,launchOnLoad:[]};
            carousel.$elts.carousel = jQuery(this).addClass("js");
            carousel.$elts.content = jQuery(this).children().css({position:"absolute",top:0});
            if (!carousel.$elts.content.parent().hasClass("carousel-wrap")) {
                carousel.$elts.wrap = carousel.$elts.content.wrap('<div class="carousel-wrap"></div>').parent().css({overflow:"hidden",position:"relative"});
            }
            carousel.steps = {first:0,count:carousel.$elts.content.children().length};
            carousel.steps.last = carousel.steps.count - 1;
            if (jQuery.isFunction(carousel.params.prevBtnInsertFn)) {
                carousel.$elts.prevBtn = carousel.params.prevBtnInsertFn(carousel.$elts)
            } else {
                carousel.$elts.prevBtn = jQuery(settings.prevBtn)[settings.prevBtnInsert](carousel.$elts.carousel)
            }
            if (jQuery.isFunction(carousel.params.nextBtnInsertFn)) {
                carousel.$elts.nextBtn = carousel.params.nextBtnInsertFn(carousel.$elts)
            } else {
                carousel.$elts.nextBtn = jQuery(settings.nextBtn)[settings.nextBtnInsert](carousel.$elts.carousel)
            }
            carousel.$elts.nextBtn.addClass("carousel-control next carousel-next");
            carousel.$elts.prevBtn.addClass("carousel-control previous carousel-previous");
            bindButtonEvents(carousel);
            if (carousel.params.pagination) {
                initPagination(carousel)
            }
            h(carousel);
            jQuery(function() {
                var images = carousel.$elts.content.children();			
                var m = 0;
                images.each(function() {
                    $item = jQuery(this);
                    $itemHeight = $item.outerHeight();
                    if ($itemHeight > m) {
                        m = $itemHeight
                    }
                });
                if (carousel.params.verticalMargin > 0) {
                    m = m + carousel.params.verticalMargin
                }
                images.height(m);
                var firstImage = carousel.$elts.content.children(":first");				
                carousel.itemWidth = firstImage.outerWidth(); 
				
				/** 
				 * Endless loop init
				 * added 05/25/2011 by @author Roman Iermakov <rermakov@odesk.com>
				 */
				if (carousel.params.loop) {
					var lastImage  = carousel.$elts.content.children(":last");
				
					carousel.$elts.content
						.prepend(lastImage.clone(true).addClass('cloned'))
						.append(firstImage.clone(true).addClass('cloned'));			

					setStartPosition(carousel, carousel.params.dispItems);
					carousel.steps.first  = carousel.params.dispItems;
					carousel.steps.count += 1;
				}								
				
                if (settings.direction == "vertical") {
                    carousel.contentWidth = carousel.itemWidth
                } else {
					carousel.contentWidth = (function() {
						var width = 0;
						carousel.$elts.content.children().each(function(i) {							
							width += jQuery(this).outerWidth()
						});
						return width
					})()
                }
                carousel.$elts.content.width(carousel.contentWidth);
                carousel.itemHeight = m;
                if (settings.direction == "vertical") {
                    carousel.$elts.content.css({height:carousel.itemHeight * carousel.steps.count + "px"});
                    carousel.$elts.content.parent().css({height:carousel.itemHeight * carousel.params.dispItems + "px"})
                } else {
                    carousel.$elts.content.parent().css({height:carousel.itemHeight + "px"})
                }
				
                enableOrDisableControls(carousel);
				
                jQuery.each(carousel.launchOnLoad, function(o, p) {
                    p()
                });

                // Init selection
                if (carousel.params.selectable) {
                    carousel.$elts.content.find("li").each(function() {
                        // Fading in image on click and fading out previous selected image.
                        $(this).click(function () {
                            if (carousel.$elts.selectedNode) {
                                $(carousel.$elts.selectedNode).removeClass("selected");

                                $(carousel.$elts.selectedNode).find("img").animate({
                                    'opacity' : '0.5'
                                });
                            }

                            $(this).addClass("selected");
                            carousel.$elts.selectedNode = this;

                            $(this).find("img").animate({
                                'opacity' : '1'
                            });

                            // Updating big image
                            $(carousel.params.updateImgOnSelect).attr("src", $(this).find("img").attr("src"));
                        });

                        // Fading in image on mouseenter.
                        $(this).mouseenter(function () {
                            if (!$(this).hasClass("selected")) {
                                $(this).find("img").animate({
                                    'opacity' : '1'
                                });
                            }
                        });

                        // Fading out image on mouseleave.
                        $(this).mouseleave(function () {
                            if (!$(this).hasClass("selected")) {
                                $(this).find("img").animate({
                                    'opacity' : '0.5'
                                });
                            }
                        });
                    });

                    // Fading out all images
                    carousel.$elts.content.find("li img").each(function() {
                        setOpacity(this, 0.5)
                    });

                    // Selecting first image.
					if (carousel.params.loop) {
						carousel.$elts.content.find("li").eq(1).click();
					} else {
						carousel.$elts.content.find("li:first").click();
					}
                }

                carousel.play = function (immediate) {
                    window.setTimeout(function() {
                        carousel.autoSlideInterval = window.setInterval(function() {
                            goToNextItem(carousel, getNextItemIndex(carousel, "next"), "next")
                        }, carousel.params.autoSlideInterval)
                    }, carousel.params.delayAutoSlide);

                    if (immediate) {
                        goToNextItem(carousel, getNextItemIndex(carousel, "next"), "next");
                    }
                };

                carousel.pause = function () {
                    clearAutoSlideInterval(carousel);
                };

                if (carousel.params.autoSlide) {
                    carousel.play();
                }

                self.carousel = carousel;

                carousel.getCurrentItemIndex = function () {
                    var nextItemIndex = getNextItemIndex(carousel, "next");
                    var curItemIndex = nextItemIndex - 1;
                    return curItemIndex == - 1 ? carousel.steps.last : curItemIndex;
                };		
            })
        })
    };

    function bindButtonEvents(carousel) {
        carousel.$elts.nextBtn.add(carousel.$elts.prevBtn).bind("enable", function() {
            var k = jQuery(this).unbind("click").bind("click", function() {
                goToNextItem(carousel, getNextItemIndex(carousel, (k.is(".next") ? "next" : "prev")), (k.is(".next") ? "next" : "prev"));
                clearAutoSlideInterval(carousel)
            }).removeClass("disabled");
            if (carousel.params.combinedClasses) {
                k.removeClass("next-disabled previous-disabled")
            }
        }).bind("disable", function() {
            var k = jQuery(this).unbind("click").addClass("disabled");
            if (carousel.params.combinedClasses) {
                if (k.is(".next")) {
                    k.addClass("next-disabled")
                } else {
                    if (k.is(".previous")) {
                        k.addClass("previous-disabled")
                    }
                }
            }
        }).hover(function() {
            jQuery(this).toggleClass("hover")
        })
    }

    function initPagination(carousel) {
        carousel.$elts.pagination = jQuery('<div class="center-wrap"><div class="carousel-pagination"><p></p></div></div>')[((carousel.params.paginationPosition == "outside") ? "insertAfter" : "appendTo")](carousel.$elts.carousel).find("p");
        carousel.$elts.paginationBtns = jQuery([]);
        carousel.$elts.content.find("li").each(function(k) {
            if (k % carousel.params.dispItems == 0) {
                carousel.$elts.paginationBtns = carousel.$elts.paginationBtns.add(jQuery('<a role="button"><span>' + carousel.params.tabLabel(carousel.$elts.paginationBtns.length + 1) + "</span></a>").data("firstStep", k))
            }
        });
        carousel.$elts.paginationBtns.each(function() {
            jQuery(this).appendTo(carousel.$elts.pagination)
        });
        carousel.$elts.paginationBtns.slice(0, 1).addClass("active");
        carousel.launchOnLoad.push(function() {
            carousel.$elts.paginationBtns.click(function(k) {
                goToNextItem(carousel, jQuery(this).data("firstStep"));
                clearAutoSlideInterval(carousel)
            })
        })
    }

    function h(carousel) {
        if (carousel.params.useAddress && jQuery.isFunction(jQuery.fn.address)) {
            jQuery.address.init(function(l) {
                var k = jQuery.address.pathNames();
                if (k[0] === carousel.params.adressIdentifier && !!k[1]) {
                    goToNextItem(carousel, k[1] - 1)
                } else {
                    jQuery.address.value("/" + carousel.params.adressIdentifier + "/1")
                }
            }).change(function(l) {
                var k = jQuery.address.pathNames();
                if (k[0] === carousel.params.adressIdentifier && !!k[1]) {
                    goToNextItem(carousel, k[1] - 1)
                }
            })
        } else {
            carousel.params.useAddress = false
        }
    }
	
	function setStartPosition(carousel, index) {
		if (carousel.params.direction == "vertical") {
			carousel.$elts.content.css({top:-(carousel.itemHeight * index) + "px"});
		} else {
			carousel.$elts.content.css({left:-(carousel.itemWidth * index) + "px"});
		}	
	}
	
    function goToNextItem(carousel, nextItemIndex, action) {
        if (carousel.params.selectable) {
            if (action == "next") {
                $(carousel.$elts.selectedNode).next().click()
            } else {
                $(carousel.$elts.selectedNode).prev().click()
            }
        }

        carousel.params.callback(nextItemIndex);

		if (carousel.params.loop) {
			if (action == 'next' && nextItemIndex == 0) {
				setStartPosition(carousel, 0);
				nextItemIndex += carousel.params.dispItems;	
			} 

			if (action == 'prev' && nextItemIndex == 0) {
			    setStartPosition(carousel, carousel.steps.count * carousel.params.dispItems);
				nextItemIndex = carousel.steps.count - carousel.params.dispItems;
			}
		}

        applyEffect(carousel, nextItemIndex);
        carousel.steps.first = nextItemIndex;
        enableOrDisableControls(carousel);
        if (carousel.params.useAddress) {
            jQuery.address.value("/" + carousel.params.adressIdentifier + "/" + (nextItemIndex + 1))
        }
    }

    function getNextItemIndex(carousel, action) {
        if (action == "prev") {
            if (!carousel.params.showEmptyItems) {
                if (carousel.steps.first == 0) {
                    return((carousel.params.loop) ? (carousel.steps.count - carousel.params.dispItems) : false)
                } else {
                    return Math.max(0, carousel.steps.first - carousel.params.dispItems)
                }
            } else {
                if ((carousel.steps.first - (carousel.params.treatAsCarousel ? carousel.params.dispItems : 1)) >= 0) {
                    return carousel.steps.first - (carousel.params.treatAsCarousel ? carousel.params.dispItems : 1);
                } else {
                    return((carousel.params.loop) ? (carousel.steps.count - carousel.params.dispItems) : false)
                }
            }
        } else {
            if (action == "next") {
                if ((carousel.steps.first + carousel.params.dispItems) < carousel.steps.count) {
                    if (!carousel.params.showEmptyItems) {
                        return Math.min(carousel.steps.first + carousel.params.dispItems, carousel.steps.count - carousel.params.dispItems)
                    } else {
                        return carousel.steps.first + (carousel.params.treatAsCarousel ? carousel.params.dispItems : 1);
                    }
                } else {
                    return((carousel.params.loop) ? 0 : false)
                }
            }
        }
    }

    function applyEffect(carousel, nextItemIndex) {
        if (carousel.params.dispItems >= $(carousel.$elts.content).find("li").length) {
            return;
        }

        switch (carousel.params.effect) {
            case"no":{
                if (carousel.params.direction == "vertical") {
                    carousel.$elts.content.css("top", -(carousel.itemHeight * nextItemIndex) + "px")
                } else {
                    carousel.$elts.content.css("left", -(carousel.itemWidth * nextItemIndex) + "px")
                }
                break;
            }
            case"fade":{
                if (carousel.params.dispItems > 1) {
                    if (carousel.params.direction == "vertical") {
                        carousel.$elts.content.hide().css("top", -(carousel.itemHeight * nextItemIndex) + "px").fadeIn(carousel.params.animSpeed)
                    } else {
                        carousel.$elts.content.hide().css("left", -(carousel.itemWidth * nextItemIndex) + "px").fadeIn(carousel.params.animSpeed)
                    }
                } else {
                    //Cleaning up cloned image.
                    if (carousel.cleanUpCloned) {
                        carousel.cleanUpCloned();
                    }

                    var currentImageIndex = carousel.getCurrentItemIndex();
                    var currentImage = $($(carousel.$elts.content).find("li").get(currentImageIndex));
                    var nextImage = $($(carousel.$elts.content).find("li").get(nextItemIndex));

                    //Cloning current image. And inserting it underneath next image in order to get smooth animation.
                    var currentImageClone = $(currentImage).clone();
                    currentImageClone.css("position", "relative");
                    currentImageClone.css("z-index", isIE7() || isIE6() ? "0" : "auto");
                    currentImageClone.css("left", (carousel.itemWidth * nextItemIndex) + "px");
                    currentImageClone.css("top", -(carousel.itemHeight) + "px");
                    carousel.$elts.content.append(currentImageClone);

                    //Hiding next image.
                    nextImage.hide();
                    nextImage.css("position", "relative");
                    nextImage.css("z-index", "1");

                    //Moving viewport.
                    carousel.$elts.content.css("left", -(carousel.itemWidth * nextItemIndex) + "px").fadeIn(carousel.params.animSpeed)

                    carousel.cleanUpCloned = function () {
                        $(currentImageClone).remove();
                        nextImage.css("position", "static");
                        nextImage.css("z-index", isIE7() || isIE6() ? "0" : "auto");
                    };

                    //Performing animation
                    nextImage.fadeIn(carousel.params.animSpeed, function () {
                        carousel.cleanUpCloned();
                    });
                }
                break;
            }
            default:{		
                if (carousel.params.direction == "vertical") {
                    carousel.$elts.content.stop().animate({top:-(carousel.itemHeight * nextItemIndex) + "px"}, carousel.params.animSpeed, carousel.params.slideEasing)
                } else {
                    carousel.$elts.content.stop().animate({left:-(carousel.itemWidth * nextItemIndex) + "px"}, carousel.params.animSpeed, carousel.params.slideEasing)
                }
                break;
            }
        }
    }

    function enableOrDisableControls(carousel) {
        if (getNextItemIndex(carousel, "prev") !== false) {
            carousel.$elts.prevBtn.trigger("enable")
        } else {
            carousel.$elts.prevBtn.trigger("disable")
        }
        if (getNextItemIndex(carousel, "next") !== false) {
            carousel.$elts.nextBtn.trigger("enable")
        } else {
            carousel.$elts.nextBtn.trigger("disable")
        }
        if (carousel.params.pagination) {
            carousel.$elts.paginationBtns.removeClass("active").filter(function() {
                return(jQuery(this).data("firstStep") == carousel.steps.first)
            }).addClass("active")
        }
    }

    function clearAutoSlideInterval(carousel) {
        if (!!carousel.autoSlideInterval) {
            window.clearInterval(carousel.autoSlideInterval)
        }
    }
})(jQuery);

